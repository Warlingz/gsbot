//goodstuffs Account AnitExpire Starter

// Use the Create List for Account AntiExpire.bat or List Creator.exe to create a list

var logPath = "logs/xCompleted Accounts/";			// log path to accounts (folder with account.txt files)
var sitDelay = 80;									// in seconds sit in lobby between switches
var accountListPath = "logs/Complete_Accounts.txt";	// path and name of the list_of_accounts.txt created by batch file or List Creator



////////////////////////////////////////
//       No Need to Edit Below        //
////////////////////////////////////////



var gameMinLength		= 180000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)

////////////////////////////////////////
//        Connection Settings:        //
////////////////////////////////////////

var unableToConnectRetry	= 15;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
var realmDownRetry		= 900;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
var disconnectedRetry		= 5;		// time in minutes to retry on a disconnection (usually ip ban related)
var cdkeyInUseRetry		= 5;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
var connectingToBnetTimeout	= 10000;	// time in milliseconds to wait for a login to time out and click cancel and retry
var characterScreenTimeout	= 10000;	// time in milliseconds to wait for character screen to appear
var pleaseWaitTimeout		= 10000;	// time in milliseconds to wait for a please wait popup
var createGameThreshold		= 10000;		// time in milliseconds to wait between making games
var createGameThresholdRandom	= 1000;		// time in milliseconds to randomly add +/- to the game create time
var createGameTimeout		= 44000;	// time in milliseconds to register a failed to create game
var waitInLineTimeout		= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
var characterSelectDelay	= 2500;		// time in milliseconds to wait before selecting a character on the char screen
var loginDelay			= 1000;		// time in milliseconds to wait before submitting login information
var clickDelay			= 500;		// wait X milliseconds before next action after a click event
var textDelay			= 500;		// wait X milliseconds before next action after inserting text into a textbox
var clickDelayRandom		= 500;		// random amount of time to add to a click
var textDelayRandom		= 500;		// random amount of time to add to a text set
var gameDoesNotExistDelayMin	= 600000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
var gameDoesNotExistDelayMax	= 900000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
var gameDoesNotExistTimeout	= 30000;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
var waitBeforeEnterChatMin	= 1000;		// min how long to wait before entering chat
var waitBeforeEnterChatMax	= 2000;		// max how long to wait before entering chat
var waitInChatBeforeActionsMin	= 2000;		// min how long to wait before joining channel
var waitInChatBeforeActionsMax	= 3000;		// max how long to wait before joining channel
var waitBeforeNextLineChatMin	= 500;		// Minimum ammount of time to add after each text line	
var waitBeforeNextLineChatMax	= 1500;		// Maximum ammount of time to add after each text line

// DONT EDIT ANYTHING BELOW THIS

// D2NT Manager Command
const D2NT_MGR_LOADING = 1;
const D2NT_MGR_READY = 2;
const D2NT_MGR_LOGIN = 3;
const D2NT_MGR_CREATE_GAME = 4;
const D2NT_MGR_INGAME = 5;
const D2NT_MGR_RESTART = 6;
const D2NT_MGR_CHICKEN = 7;
const D2NT_MGR_PRINT_STATUS = 8;
const D2NT_MGR_PRINT_LOG = 9;
var alreadyLoggedIn = false; // will only send the login command once leave as unless you want to login everytime you join a channel
var lastGameMade = GetTickCount();
var lastGameStatus = 0;
var nextGameMake = 0;
var inGameAt = 0;
var chatActionsDone = false;
var lastGameFailed = false;
var tempDelay = Random(waitBeforeNextLineChatMin, waitBeforeNextLineChatMax);
var gameInfo = "";
var bugignor = true;
var _newAccount = "";
var currentAcc = "";
var currentAccPassword = "";
Include("libs/controlInfo.ntl");
Include("libs/common/NTColorConverter.ntl");

var myPos = 0;

var controlData = new controlInfo();
var timeout;

function NTMain()
{
	Delay(1000);

	var _ingame = false;

	controlData.clickDelay = clickDelay;
	controlData.textDelay = textDelay;
	controlData.clickDelayRandom = clickDelayRandom;
	controlData.textDelayRandom = textDelayRandom;
	
	while(1)
	{
		if(me.ingame)
		{
			if(!inGameAt)
				inGameAt = GetTickCount();

			if(!_ingame)
			{
				RunGC(); // run garbage collector between each game

				if(Load("NTBot/NTBotGame.ntj"))
				{
					_ingame = true;
					if(me.playtype > 0)
						sendEventToOOG(D2NT_MGR_INGAME, "In Game[IP:" + me.gameserverip.split(".")[3] + "]", 0);
						
					else
						sendEventToOOG(D2NT_MGR_INGAME, "In Game", 0);
					lastGameStatus = 2; // in game successful
				}
			}

			Delay(1000);
		}
		else
		{
			
			if(_ingame)
			{
				My_ExitGame_Check(); // out of korean modded d2nt fixes white screen of death

				_ingame = false;
				sendEventToOOG(D2NT_MGR_READY, "", 0);
			}

			locationAction(controlData.getLocation());

			Delay(500);
		}
	}
}

function locationAction(location)
{
	switch(location.id)
	{
	case 3: // Lobby Chat
		break;
	case 1:	// Lobby
		if(myPos < 8)
		{
			Delay(200);	
			locationTimeout(sitDelay*1000, location);
			myPos++;
			controlData.click(controlData.controls.lobby.button.quit);
		}
		else if(myPos == 8)
		{
			Delay(200);
			controlData.click(controlData.controls.lobby.button.quit);
			Delay(200);			
		}
		
		break;

	case 2: // Waiting In Line
		if(GetTickCount()-lastGameMade > waitInLineTimeout)
			controlData.click(controlData.controls.lobby.inLine.button.cancel);
		break;

	case 4: // Create Game
		sendEventToOOG(D2NT_MGR_CREATE_GAME, location.name, 0);

		locationTimeout(5000, location);

		lastGameMade = GetTickCount();
		lastGameStatus = 1; // pending creation
		break;

	case 5: // Join Game
		break;

	case 6: // Ladder
		break;

	case 7: // Channel List
		break;

	case 8: // Main Menu
		if(controlData.getCurrentRealmIndex() == me.gatewayid)
		{
			outputGameLength();
			controlData.click(controlData.gameTypes[me.playtype]);
		}
		else
			controlData.click(controlData.controls.mainMenu.button.gateway);
		break;

	case 9: // Login
		GS_RetrieveAcc();
			Delay(200);			
		if(currentAcc != ""){
			Delay(1000);			
			controlData.setText(controlData.controls.login.editBox.accountName, currentAcc);
			Delay(100);
			controlData.setText(controlData.controls.login.editBox.password, currentAccPassword);
			Delay(100);
			controlData.click(controlData.controls.login.button.logIn);
		}
		else{
			locationTimeout(sitDelay*100000, location);			
		}
			
		break;

	case 10: // Login Error (this is a fatal error, so stop)
        sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Bad Account or PW Entered.......Idling", 0);
		while(1) { Delay(500); }        		
		sendEventToOOG(D2NT_MGR_RESTART, location.name, 10);
		Delay(3500);
		break;

	case 11: // Unable To Connect
		timeoutDelay(unableToConnectRetry*60*1000, location)
		controlData.click(controlData.controls.login.unableToConnect.button.ok);
		break;

	case 12: // Character Select
		var _time, _control;

		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
		
		for(_time = 0 ; _time < characterScreenTimeout ; _time += 500)
		{
			_control = controlData.get(controlData.controls.characterSelect.textBox.characterInfo[myPos]);
			if(_control && _control.GetText() != undefined)
				break;

			Delay(500);
		}

		if(_time < characterScreenTimeout)
		{
			Delay(characterSelectDelay);

			controlData.click(controlData.controls.characterSelect.textBox.characters[myPos], 0, 0, 1);
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[myPos], 0, 0, 1);
						
			// reset last game made, so it doesnt make a game immediately
			inGameAt = 0;
			setNextGameMake();
		}
		else
		{
			if(myPos >= 8){	
				myPos = 0;
				Delay(200);
				sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_3 + "Account [ " + C_ORANGE + currentAcc + COLOR_3 + " ] Will Not Expire for 10 Days".split("\n")[0]+ ";" + COLOR_4 + "------------------------------\n" + "Account : " + currentAcc + "\n" + COLOR_2 + "Password : " + currentAccPassword + "\n" + COLOR_4 + "---------------------------------", 0);
				controlData.click(controlData.controls.characterSelect.button.exit);
			}
		}
		break;

	case 13: // Realm Down - Character Select screen
		controlData.click(controlData.controls.characterSelect.button.exit);
		timeoutDelay(realmDownRetry*60*1000, location);
		break;

	case 14: // Character Select - Disconnected
		timeoutDelay(disconnectedRetry*60*1000, location);
		controlData.click(controlData.controls.characterSelect.disconnected.button.ok);
		break;

	case 15: // New Character
		sendEventToOOG(D2NT_MGR_PRINT_LOG, "I was here [ 15 ]", 0);
		break;	

	case 16: // Character Select - Please Wait popup
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.characterSelect.pleaseWait.button.cancel);
		break;

	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		controlData.click(controlData.controls.lobby.lostConnection.button.ok);
		break;

	case 18: // D2 Splash
		controlData.click(controlData.controls.d2Splash.textBox.copyright);
		break;

	case 19: // Login - Cdkey In Use
		timeoutDelay(cdkeyInUseRetry*60*1000, location);
		controlData.click(controlData.controls.login.cdkeyInUse.button.ok);
		break;

	case 20: // Single Player - Select Difficulty
		controlData.click(controlData.singlePlayerDifficulties[me.diff]);
		break;

	case 21: // Main Menu - Connecting
		if(!locationTimeout(connectingToBnetTimeout, location))
			controlData.click(controlData.controls.mainMenu.connecting.button.cancel);
		break;

	case 22: // Login - Invalid Cdkey (classic or xpac)
        sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Bad CD Key...........Idling", 0);
		while(1) { Delay(500); }		
		sendEventToOOG(D2NT_MGR_RESTART, location.name, 3600);
		Delay(3500);
		break;	

	case 23: // Character Select - Connecting
		if(!locationTimeout(characterScreenTimeout, location))
			controlData.click(controlData.controls.characterSelect.button.exit);
		break;

	case 24: // Server Down - not much to do but wait..
		break;

	case 25: // Lobby - Please Wait
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.lobby.pleaseWait.button.cancel);
		break;

	case 26: // Lobby - Game Name Exists
		sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Game already exists", 0);

		inGameAt = 0;
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(15000, location);
		break;

	case 27: // Gateway Select
		controlData.clickRealmEntry(me.gatewayid);
		controlData.click(controlData.controls.gateway.button.ok);
		break;

	case 28: // Lobby - Game Does Not Exist
		inGameAt = Random(gameDoesNotExistDelayMin, gameDoesNotExistDelayMax);
		//Delay(inGameAt);
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(gameDoesNotExistTimeout, location);
		break;	
	default :
			sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.id, 0);
		//sendEventToOOG(D2NT_MGR_PRINT_LOG, C_RED + "Unknown Location - " + location.name + " - ID - " + location.id, 0);
		break;
	
	}
}

function sendEventToOOG(locationId, statusString, pendingTime)
{
	return SendCopyData("D2NT Manager", null, (locationId<<16)|pendingTime, statusString);
}

function setNextGameMake()
{
	lastGameMade = GetTickCount();
	nextGameMake = lastGameMade + createGameThreshold + Random(0-createGameThresholdRandom, createGameThresholdRandom) + inGameAt;
	inGameAt = 0;
	chatActionsDone = false;
}

function outputGameLength()
{
	if(inGameAt)
	{
		duration = GetTickCount() - inGameAt;

		inGameAt = (duration < gameMinLength ? gameMinLength - duration : 0);
	}
}

function locationTimeout(time, location)
{
	endtime = GetTickCount() + time;

	while(controlData.getLocation().id == location.id && endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(500);
	}

	return (controlData.getLocation().id != location.id);
}

function timeoutDelay(time, location)
{
	endtime = GetTickCount() + time;

	while(endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(1000);
	}
}

function getRandomString(_length)
{
	_retString = "";
	_charSet = "0123456789abcdefghijklmnopqrstuvwxyz";

	while(_length--)
	{
		_retString += _charSet.charAt(Random(0, _charSet.length-1));
		Delay(1);
	}

	return _retString;
}
function getGameName(lastGameString)
{
   if(!lastGameString)
      return "";
   else
      return (lastGameString.split("-")[0] + "-");
}

function getGameCounter(lastGameString, simple)
{
   var myCount;
   if(!lastGameString)
      return "-1";
   else
   {
      switch(lastGameString.split("-")[1])
      {
         case "08":
            myCount = 9;
            break;
         case "09":
            myCount = 10;
            break;
		case "99":
			myCount = 00;
			break;
         default:
            myCount = parseInt(lastGameString.split("-")[1]) + 1;
            break;
      }
      if(!simple)
      {
         if(myCount <= 9)
            return ('0' + myCount);
      }
      return myCount;
   }
}

function My_ExitGame_Check()
{
    for (var i = 0; i < 40; i++)
    {
        if (controlData.getLocation().id != undefined)
            break;

        if (i > 38)
        {
            sendEventToOOG(D2NT_MGR_PRINT_LOG, "ÿc1got fucked up (restarting)", 0);
            sendEventToOOG(D2NT_MGR_RESTART, "", 5);
            My_Delay();
        }

        Delay(500);
			CloseD2();
    }
}

function My_Delay(retry)
{
    if (arguments.length < 1)
        retry = 20;

    while (retry-- > 0)
        Delay(1000);
}

function LogPrintSimple(filepath, mesg){ 

	var _filepath = filepath;
	var _mesg = mesg;
	
	var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
	var logfile = FileOpen(_filepath, 2); // opens file 
	if(!logfile)
		var logfile = FileOpen(_filepath, 1); // if file not there then creates it

	logfile.WriteLine(date + " " + _mesg );
	logfile.Close();
}

// modes 0 = read only, 1 = overwrite the file, 2 = add to file
function NT_File(path, mode, msg, delay) { //big thanks to all the koreans out there
    var _msg  = "";
    var _line = "";
    var _fileHandle;
    var _isFileCheck = false;

    if (arguments.length < 3) { msg   = ""; }
    if (arguments.length < 4) { delay = (mode > 0) ? 5 : 2; }

    while (delay--) {
        if (mode == 2 && !_isFileCheck) {
            _fileHandle = FileOpen(path, 0);
            if (!_fileHandle)
                _fileHandle = FileOpen(path, 1);

            if (_fileHandle)
                _fileHandle.Close();

            _isFileCheck = true;
        }

        _fileHandle = FileOpen(path, mode);
        if (_fileHandle)
            break;

        if (delay)
            Delay(200);
    }

    if (_fileHandle) {
        if (mode == 0) {
            while (!_fileHandle.eof) {
                _line = _fileHandle.ReadLine();
                if (_line || !_fileHandle.eof)
                    _msg += _line + msg;
            }
        }
        else if (msg)
            _fileHandle.WriteLine(msg);

        _fileHandle.Close();
    }

    return _msg;
}
var Accountz = [];
var Accounts = [];
var BlackList = [];

function GS_RetrieveAcc() { // to retrieve game and pw
	var _customacc;
	var grabAccountList;
	var grabListLine;
	var grabLine;
	var grabAccount;
	var lines;
	
	grabAccountList = FileOpen(accountListPath, 0);
	while(!grabAccountList.eof){
		_customacc = grabAccountList.ReadLine();
		grabListLine = _customacc.substring(0, _customacc.length);
		Accountz.push(grabListLine);
	}
	grabAccountList.Close();
	for(var i = 0 ; i < Accountz.length ; i++){		
		if(BlackList.indexOf(Accountz[i]) == -1)
			Accounts.push(Accountz[i]);
	}
	for(var i = 0 ; i < Accounts.length ; i++){
		if(BlackList.indexOf(Accounts[i]) == -1){
			grabAccount = FileOpen(logPath + Accounts[i], 0);	
			if(Accounts[i] && grabAccount != null){ 
				grabLine = grabAccount.ReadLine();
				currentAcc = grabLine.substring(grabLine.indexOf('Account : ') + 10, grabLine.indexOf('Password : ') - 1);
				currentAccPassword = grabLine.substring(grabLine.indexOf('Password : ') + 11, grabLine.length);
				grabAccount.Close();
				BlackList.push(Accounts[i]);
				break;
			}else if(!Accounts[i] || grabAccount == null){
				currentAcc = "";
				currentAccPassword = "";				
			}
		}
	}
		
	return;
}
